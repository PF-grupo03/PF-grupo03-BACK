// import { ArrayMinSize, IsArray, IsEmpty, IsNotEmpty, IsUUID } from "class-validator";
// import { ApiHideProperty, ApiProperty } from "@nestjs/swagger";
// import { ProductEntity } from "../products/product.entity";

// export class CreateOrderDto {

//     @ApiProperty({
//         description: 'Unique user identifier generated by the database (UUID v4)',
//         example: '123e4567-e89b-12d3-a456-426614174000'
//     })
//     @IsNotEmpty()
//     @IsUUID()
//     userId: string;

//     @ApiProperty({
//         description: 'List of products to include in the order',
//         example: [{ "id": "uuid"},{"id": "uuid"}]
//     })
//     @IsArray()
//     @ArrayMinSize(1)
//     products: Partial<ProductEntity>[];

//     @ApiHideProperty()
//     @IsEmpty()
//     stripeSessionId: string;

//     @ApiHideProperty()
//     @IsEmpty()
//     status: string;
// }



import { IsString, IsArray, ValidateNested, IsOptional, IsNumber, IsPositive, Validate, IsEmpty, IsBoolean, Min } from 'class-validator';
import { Type } from 'class-transformer';

// Definir un validador personalizado
import { ValidatorConstraint, ValidatorConstraintInterface } from 'class-validator';
import { ApiHideProperty } from '@nestjs/swagger';

class ProductDto {
  @IsString()
  id: string;
}

@ValidatorConstraint({ name: 'atLeastOneAdult', async: false })
class AtLeastOneAdultConstraint implements ValidatorConstraintInterface {
  validate(value: any, args: any) {
    const { adults } = args.object as CreateOrderDto;
    return adults > 0; // Solo se verifica que haya al menos un adulto
  }

  defaultMessage(args: any) {
    return 'At least one adult must be specified';
  }
}

export class CreateOrderDto {
  @IsString()
  userId: string;

  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => ProductDto)
  products: ProductDto[];

  @IsOptional()
  @IsString()
  date?: string;

  @IsOptional()
  @IsNumber()
  @IsPositive()
  @Min(1)
  adults: number = 0; 

  @IsOptional()
  @IsNumber()
  @Min(0)
  children: number = 0; 

  @ApiHideProperty()
  @IsEmpty()
  stripeSessionId: string;

  @ApiHideProperty()
  @IsEmpty()
  status: string;

  @Validate(AtLeastOneAdultConstraint) 
  validateAdults() {}

  @IsBoolean()
  medicalInsurance: boolean = false; 

  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => PassengerDto)
  passengers: PassengerDto[];
}

class PassengerDto {
  @IsString()
  name: string;

  @IsString()
  email: string;

  @IsString()
  cellphone: string;

  @IsString()
  dni: string;
}
